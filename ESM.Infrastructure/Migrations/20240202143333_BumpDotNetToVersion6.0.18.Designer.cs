// <auto-generated />
using System;
using ESM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240202143333_BumpDotNetToVersion6.0.18")]
    partial class BumpDotNetToVersion6018
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ESM.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("ESM.Domain.Entities.CandidateExaminationModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("ModuleId");

                    b.ToTable("CandidateExaminationModule");
                });

            modelBuilder.Entity("ESM.Domain.Entities.CandidateShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ShiftId");

                    b.ToTable("CandidateShift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ESM.Domain.Entities.DepartmentShiftGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacultyShiftGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TemporaryInvigilatorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyShiftGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentShiftGroups");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DisplayId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ExpectEndAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpectStartAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ExaminationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CandidatesCount")
                        .HasColumnType("int");

                    b.Property<int?>("Credit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("DepartmentAssign")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Faculty")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Method")
                        .HasColumnType("int");

                    b.Property<string>("ModuleClass")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rooms")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<int?>("Shift")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationData");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ExaminationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationEvents");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("ESM.Domain.Entities.FacultyShiftGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CalculatedInvigilatorsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InvigilatorsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ShiftGroupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ShiftGroupId");

                    b.ToTable("FacultyShiftGroups");
                });

            modelBuilder.Entity("ESM.Domain.Entities.InvigilatorShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("InvigilatorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InvigilatorId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TeacherId");

                    b.ToTable("InvigilatorShift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CandidatesCount")
                        .HasColumnType("int");

                    b.Property<int>("ExamsCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("HandedOverUserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InvigilatorsCount")
                        .HasColumnType("int");

                    b.Property<string>("Report")
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShiftGroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HandedOverUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ShiftGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ShiftGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("DepartmentAssign")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InvigilatorsCount")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<int?>("Shift")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ShiftGroups");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("TeacherId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ESM.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ESM.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ESM.Domain.Entities.CandidateExaminationModule", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Candidate", "Candidate")
                        .WithMany("ExaminationModules")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Examination", "Examination")
                        .WithMany("CandidatesOfModule")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Module", "Module")
                        .WithMany("CandidatesOfExamination")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Examination");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ESM.Domain.Entities.CandidateShift", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateShift")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Shift", "Shift")
                        .WithMany("CandidateShift")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Department", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ESM.Domain.Entities.DepartmentShiftGroup", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentShiftGroups")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESM.Domain.Entities.FacultyShiftGroup", "FacultyShiftGroup")
                        .WithMany("DepartmentShiftGroups")
                        .HasForeignKey("FacultyShiftGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("FacultyShiftGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Examination", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Teacher", null)
                        .WithMany("Examinations")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ExaminationData", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Examination", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ExaminationEvent", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Examination", "Examination")
                        .WithMany("Events")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("ESM.Domain.Entities.FacultyShiftGroup", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Faculty", "Faculty")
                        .WithMany("FacultyShiftGroups")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.ShiftGroup", "ShiftGroup")
                        .WithMany("FacultyShiftGroups")
                        .HasForeignKey("ShiftGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("ShiftGroup");
                });

            modelBuilder.Entity("ESM.Domain.Entities.InvigilatorShift", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationUser", "Invigilator")
                        .WithMany()
                        .HasForeignKey("InvigilatorId");

                    b.HasOne("ESM.Domain.Entities.Shift", "Shift")
                        .WithMany("InvigilatorShift")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Teacher", null)
                        .WithMany("InvigilatorShifts")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Invigilator");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Module", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESM.Domain.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Shift", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationUser", "HandedOverUser")
                        .WithMany()
                        .HasForeignKey("HandedOverUserId");

                    b.HasOne("ESM.Domain.Entities.Room", "Room")
                        .WithMany("Shift")
                        .HasForeignKey("RoomId");

                    b.HasOne("ESM.Domain.Entities.ShiftGroup", "ShiftGroup")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Teacher", null)
                        .WithMany("HandedOverShifts")
                        .HasForeignKey("TeacherId");

                    b.Navigation("HandedOverUser");

                    b.Navigation("Room");

                    b.Navigation("ShiftGroup");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ShiftGroup", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Examination", "Examination")
                        .WithMany("ShiftGroups")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("ESM.Domain.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESM.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Teachers")
                        .HasForeignKey("FacultyId");

                    b.HasOne("ESM.Domain.Identity.ApplicationUser", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("ESM.Domain.Entities.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESM.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ESM.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESM.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateShift");

                    b.Navigation("ExaminationModules");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentShiftGroups");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Examination", b =>
                {
                    b.Navigation("CandidatesOfModule");

                    b.Navigation("Events");

                    b.Navigation("ShiftGroups");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("FacultyShiftGroups");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ESM.Domain.Entities.FacultyShiftGroup", b =>
                {
                    b.Navigation("DepartmentShiftGroups");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Module", b =>
                {
                    b.Navigation("CandidatesOfExamination");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Room", b =>
                {
                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Shift", b =>
                {
                    b.Navigation("CandidateShift");

                    b.Navigation("InvigilatorShift");
                });

            modelBuilder.Entity("ESM.Domain.Entities.ShiftGroup", b =>
                {
                    b.Navigation("FacultyShiftGroups");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("ESM.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("HandedOverShifts");

                    b.Navigation("InvigilatorShifts");
                });

            modelBuilder.Entity("ESM.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
